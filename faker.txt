# Faker pseudo for conversation factory
Call generate fake data

    required inputs:-
    .how many conversations to generate?

    optional inputs:-  
    .how many stop at REGISTRATION event with errors?
    .how many stop at TRANSFER_COMPATIBILITY_STATUSES with errors?
    .how many stop at EHR_REQUESTS with errors?
    .how many stop at EHR_RESPONSES with errors?
    .how many stop at READY_TO_INTEGRATE_STATUSES with errors?
    .how many stop at EHR_INTEGRATIONS with errors?

    checks:-
    .number of stop with errors must be equal to number of conversations.

    

If not optional input then random numbers for each event.

----------------------------------------------------------------------------

stop_count_registration =5
stop_count_transfer_compatibility_statuses = 10
etc.
stop_count_integrations = 3


For i = 0 to len(number_of_conversations):

    // create a new conversation with generates a conversationId and a list to hold all the events for that conversation.
    conversation = conversation.Create()

    //get new conversationId
    conversation_id = conversation.Id
    
    //create the first event - REGISTRATION  
    registraion_event = RegistrationEvent.Create(conversation_id = conversation_id)  
    conversation.Events.Add(registraion_event)  
    
    if stop_count_registration > 0:
        registration_error = ErrorEvent.Create(conversation_id = conversation_id, failure_point = EventType.REGISTRATIONS)
        stop_count_registration -= 1
        continue

    // create the next event - TRANSFER_COMPATIBILITY_STATUSES
    transfer_compat_status_event = TransferCompatibilityStatusesEvent.Create(conversation_id = conversation_id)
    conversation.Events.Add(transfer_compat_status_event)

    if stop_count_transfer_compatibility_statuses > 0:
        transfer_compatibility_statuses_error = ErrorEvent.Create(conversation_id = conversation_id, failure_point = EventType.TRANSFER_COMPATIBILITY_STATUSES)
        stop_count_transfer_compatibility_statuses -=1
        continue

    // create the next event - EHR_REQUESTS
    ehr_request_event = EhrRequestsEvent.Create(conversation_id = conversation_id)
    conversation.Events.Add(ehr_request_event)
    
    // create the next event - EHR_RESPONSES   
    ehr_response_event = EhrResponsesEvent.Create(conversation_id = conversation_id)
    conversation.Events.Add(ehr_response_event)
    
    // create the next event - READY_TO_INTEGRATE_STATUSES
    ready_to_integrate_event = ReadyToIntegrateStatusesEvent.Create(conversation_id = conversation_id)
    conversation.Events.Add(ready_to_integrate_event)
 
    // create the next event - EHR_INTEGRATIONS  
    ehr_integrations_event = EhrIntegrationsEvent.Create(conversation_id = conversation_id)
    conversation.Events.Add(ehr_integrations_event)

     if stop_count_integrations > 0:
        integrations_error = ErrorEvent.Create(conversation_id = conversation_id, failure_point = EventType.EHR_INTEGRATIONS)
        stop_count_integrations -=1

        // change the outcome payload to FAILED_TO_INTEGRATE if submitting an error
        ehr_integrations_event[payload][integration][outcome] = FAILED_TO_INTEGRATE //note: This should change the one in the collection by ref (check).
        continue
   
     


   
    DOCUMENT_RESPONSES 



