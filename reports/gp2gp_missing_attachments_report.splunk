index="$index$"

{% from 'functions.splunk' import
calculate_transfer_compatibility,
filter_non_transfers,
calculate_internal_transfers,
exclude_internal_transfers,
set_time_to_registration_datetime,
filter_reporting_window,
calculate_outcome,
calculate_registration_status,
calculate_sla_status %}

{{ set_time_to_registration_datetime() }}

| spath output=transferCompatible path=payload.transferCompatibilityStatus.transferCompatible
| spath output=integration_outcome path=payload{}.integration.outcome
| spath output=placeholders path=payload.ehr.placeholders{}
| eval ehrResponseEventDateTime = if(eventType="EHR_RESPONSES",_time, null())
| eval ehrRequestEventDateTime = if(eventType="EHR_REQUESTS",_time, null())
| eval transCompatStatEventDateTime = if(eventType="TRANSFER_COMPATIBILITY_STATUSES",_time, null())
| eval ehrReadyToIntegrateEventDateTime = if(eventType="READY_TO_INTEGRATE_STATUSES",_time, null())

| eval numPlaceholders = if(isnull(mvcount(placeholders)), 0, mvcount(placeholders))

{{ calculate_transfer_compatibility() }}
{{ calculate_internal_transfers() }}
{{ exclude_internal_transfers() }}

| transaction conversationId keeporphans=t

| eventstats sum(numPlaceholders) as numPlaceholders by conversationId

| eval isIntegrated = if(eventType="EHR_INTEGRATIONS", 1, 0)
| eval readyToIntegrate = if(eventType="READY_TO_INTEGRATE_STATUSES", 1, 0)

{{ calculate_registration_status() }}
{{ calculate_sla_status() }}
{{ calculate_outcome() }}

| eventstats count(eval(registrationStatus=="READY_TO_INTEGRATE" OR registrationStatus=="INTEGRATION")) as total_records_transfered
| eventstats count(eval( (registrationStatus=="READY_TO_INTEGRATE" OR registrationStatus=="INTEGRATION") AND numPlaceholders == 0)) as transfered_with_no_missing_attachments
| eventstats count(eval( (registrationStatus=="READY_TO_INTEGRATE" OR registrationStatus=="INTEGRATION") AND numPlaceholders > 0)) as transfered_with_missing_attachments

| stats first(total_records_transfered) as total_records_transfered
        first(transfered_with_no_missing_attachments) as transfered_with_no_missing_attachments
        first(transfered_with_missing_attachments) as transfered_with_missing_attachments

| eval label=mvappend("Total Records Transfered", "Records Transfered With No Missing Attachments", "Records Transfered With Missing Attachments")
| eval count=mvappend(total_records_transfered, transfered_with_no_missing_attachments, transfered_with_missing_attachments)

| eval soft_zip = mvzip(label, count)
| mvexpand soft_zip

| rex field=soft_zip "(?<label>.*),(?<count>.*)"
| table label, count

       