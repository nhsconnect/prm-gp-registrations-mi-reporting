index="$index$"

{% from 'functions.splunk' import
set_time_to_registration_datetime,
calculate_transfer_compatibility,
calculate_internal_transfers,
exclude_internal_transfers,
calculate_registration_status,
calculate_sla_status,
calculate_outcome
 %}

{{ set_time_to_registration_datetime() }}

| eval start_time = case(
       "$start_time$"="0", 0,
       like("$start_time$","%T%"), "$start_time$",
       1=1, relative_time(now(),"$start_time$")
       )
| eval end_time = case(
       "$end_time$"="now", relative_time(now(),"-0s"),
       like("$end_time$","%T%"), "$end_time$",
       1=1, relative_time(now(),"$end_time$")
       )
| eval start_time_epoch = if(isnum(start_time), start_time, strptime(start_time, "%Y-%m-%dT%H:%M:%S"))
| eval end_time_epoch = if(isnum(end_time), end_time, strptime(end_time, "%Y-%m-%dT%H:%M:%S"))

| streamstats earliest(_time) as conversationStart by conversationId
| where conversationStart >= start_time_epoch AND conversationStart <= end_time_epoch
| where _time >= start_time_epoch AND _time <= relative_time(end_time_epoch, "+$cutoff$d")


| spath output=transferCompatible path=payload.transferCompatibilityStatus.transferCompatible
| spath output=integration_outcome path=payload{}.integration.outcome
| eval ehrResponseEventDateTime = if(eventType="EHR_RESPONSES",_time, null())
| eval ehrRequestEventDateTime = if(eventType="EHR_REQUESTS",_time, null())
| eval transCompatStatEventDateTime = if(eventType="TRANSFER_COMPATIBILITY_STATUSES",_time, null())
| eval ehrReadyToIntegrateEventDateTime = if(eventType="READY_TO_INTEGRATE_STATUSES",_time, null())

{{ calculate_transfer_compatibility() }}
{{ calculate_internal_transfers() }}
{{ exclude_internal_transfers() }}

| transaction conversationId keeporphans=t

| eval isIntegrated = if(eventType="EHR_INTEGRATIONS", 1, 0)
| eval readyToIntegrate = if(eventType="READY_TO_INTEGRATE_STATUSES", 1, 0)

{{ calculate_registration_status() }}
{{ calculate_sla_status() }}
{{ calculate_outcome() }}


| eval time_period = case(
                          "$time_period$"=="month", strftime(_time,"%y-%m"), 
                          "$time_period$"=="week", strftime(_time,"%y-%m-%W"),
                          "$time_period$"=="day", strftime(_time,"%y-%m-%d")
                          )
| chart count by time_period, outcome
| addtotals fieldname="total_per_month"
| foreach * [eval <<FIELD>>=if("<<FIELD>>" == "time_period", time_period, round('<<FIELD>>'/total_per_month*100, 2))]
| fields - total_per_month