{% macro gp2gp_errors_trending_report_base () %}

{% from 'functions.splunk' import
calculate_transfer_compatibility,
filter_non_transfers,
calculate_internal_transfers,
exclude_internal_transfers,
set_time_to_registration_datetime,
filter_reporting_window,
calculate_outcome,
calculate_registration_status,
calculate_sla_status,
generate_report_start_and_end_time,
filter_conversations_by_start_and_end_times_and_cutoff,
has_errors %}

{{ set_time_to_registration_datetime() }}

{{ generate_report_start_and_end_time() }}
{{ filter_conversations_by_start_and_end_times_and_cutoff() }}

| spath output=transferCompatible path=payload.transferCompatibilityStatus.transferCompatible
| spath output=integration_outcome path=payload{}.integration.outcome
| spath output=dts_matched path=payload.demographicTraceStatus.matched
| eval is_dts_matched = if(dts_matched="true",1, 0)
| eval ehrResponseEventDateTime = if(eventType="EHR_RESPONSES",_time, null())
| eval ehrRequestEventDateTime = if(eventType="EHR_REQUESTS",_time, null())
| eval transCompatStatEventDateTime = if(eventType="TRANSFER_COMPATIBILITY_STATUSES",_time, null())
| eval ehrReadyToIntegrateEventDateTime = if(eventType="READY_TO_INTEGRATE_STATUSES",_time, null())

| spath output=errorCode path=payload.error.errorCode
| spath output=errorDescription path=payload.error.errorDescription
| spath output=failurePoint path=payload.error.failurePoint
| spath output=otherFailurePoint path=payload.error.otherFailurePoint
| spath output=integrationOutcome path=payload.integration.outcome

| eval other_failure_point = case( isnotnull(otherFailurePoint), otherFailurePoint, 1=1, "N/A")
| eval error_code_failure_point_mv = mvzip(errorCode, failurePoint)
| eval error_code_failure_point_error_desc_mv = mvzip(errorCode, mvzip(failurePoint, mvzip(other_failure_point, errorDescription)))

{{ calculate_transfer_compatibility() }}
{{ calculate_internal_transfers() }}
{{ exclude_internal_transfers() }}

| transaction conversationId keeporphans=t

{{ has_errors() }}
{{ calculate_registration_status() }}
{{ calculate_sla_status() }}
{{ calculate_outcome() }}


{% endmacro %}

index="$index$"
{{ gp2gp_errors_trending_report_base() }}