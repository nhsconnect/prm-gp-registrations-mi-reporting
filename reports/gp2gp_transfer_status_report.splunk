index="$index$"
| eval _time=strptime(registrationEventDateTime,"%Y-%m-%dT%H:%M:%S")
{% from 'functions.splunk' import
calculate_transfer_compatibility,
filter_non_transfers,
calculate_internal_transfers,
exclude_internal_transfers,
set_time_to_registration_datetime,
filter_reporting_window,
calculate_outcome,
calculate_registration_status,
calculate_sla_status %}

| spath output=transferCompatible path=payload.transferCompatibilityStatus.transferCompatible
| spath output=integration_outcome path=payload{}.integration.outcome
| eval ehrResponseEventDateTime = if(eventType="EHR_RESPONSES",_time, null())
| eval ehrRequestEventDateTime = if(eventType="EHR_REQUESTS",_time, null())
| eval transCompatStatEventDateTime = if(eventType="TRANSFER_COMPATIBILITY_STATUSES",_time, null())
| eval ehrReadyToIntegrateEventDateTime = if(eventType="READY_TO_INTEGRATE_STATUSES",_time, null())

{{ calculate_transfer_compatibility() }}
{{ calculate_internal_transfers() }}
{{ exclude_internal_transfers() }}



| transaction conversationId keeporphans=t




| eval isIntegrated = if(eventType="EHR_INTEGRATIONS", 1, 0)
| eval readyToIntegrate = if(eventType="READY_TO_INTEGRATE_STATUSES", 1, 0)

{{ calculate_registration_status() }}
{{ calculate_sla_status() }}
{{ calculate_outcome() }}


```|table registrationStatus, outcome, totalTransferTimeOutsideAla24Hours, twentyFourHoursAgo, ehrResponseEventDateTime```


| eventstats count as total_eligible_for_electronic_transfer

| eventstats count(eval(outcome=="SUCCESSFUL_INTEGRATION")) as count_successfully_integrated
| eventstats count(eval(outcome=="REJECTED")) as count_rejected
| eventstats count(eval(outcome=="AWAITING_INTEGRATION")) as count_awaiting_integration

| eval percentage_successfully_integrated=round((count_successfully_integrated/total_eligible_for_electronic_transfer) * 100,2)
| eval percentage_rejected=round((count_rejected/total_eligible_for_electronic_transfer) * 100,2)
| eval percentage_awaiting_integration=round((count_awaiting_integration/total_eligible_for_electronic_transfer) * 100,2)
| stats 
    first(total_eligible_for_electronic_transfer) as total_eligible_for_electronic_transfer
    first(count_successfully_integrated) as count_successfully_integrated,
    first(percentage_successfully_integrated) as percentage_successfully_integrated,
    first(count_rejected) as count_rejected,
    first(percentage_rejected) as percentage_rejected,
    first(count_awaiting_integration) as count_awaiting_integration,
    first(percentage_awaiting_integration) as percentage_awaiting_integration


    first(sendingPracticeSupplierName) as sendingPracticeSupplierName, 
    first(registrationStatus) as registrationStatus,
    first(requestingPracticeSupplierName) as requestingPracticeSupplierName,        
    first(slaStatus) as slaStatus,
    first(twentyFourHoursAgo) as twentyFourHoursAgo, 
    first(transCompatStatEventDateTime) as transCompatStatEventDateTime,
    ```values(errorHistory) as errorHistory,       
    dc(conversationId) by scenario```
