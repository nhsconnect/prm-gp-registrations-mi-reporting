index="$index$"
{% from 'functions.splunk' import
calculate_transfer_compatibility,
filter_non_transfers,
exclude_internal_transfers,
set_time_to_registration_datetime,
filter_reporting_window,
calculate_outcome %}

{% macro calculate_sla_status() %}
| eval twentyMinsAgo = relative_time(now(), "-20m")
| eval twentyFourHoursAgo = relative_time(now(), "-24h")
```| eval ehrResponseWithin24Hours = if(ehrResponseEvent ==1 AND twentyFourHoursAgo < ehrResponseEventDateTime, 1, 0)
| eval ehrRequestWithin20Mins = if(ehrRequestEvent ==1 AND twentyMinsAgo < ehrRequestEventDateTime , 1, 0)
| eval transCompatStatWithin20Mins =  if(transCompatStatEvent == 1 AND twentyMinsAgo < transCompatStatEventDateTime , 1, 0)```
| eval slaStatus = case(    
    registrationStatus == "EHR_SENT" AND  twentyMinsAgo > ehrResponseEventDateTime, "NOT_READY_TO_INTEGRATE_OUTSIDE_SLA",
    registrationStatus == "EHR_REQUESTED" AND twentyFourHoursAgo > ehrRequestEventDateTime, "NO_EHR_RESPONSE_OUTSIDE_SLA",
    registrationStatus == "ELIGIBLE_FOR_TRANSFER" AND twentyMinsAgo > transCompatStatEventDateTime, "NOT_EHR_REQUESTED_OUTSIDE_SLA",
    1 == 1, "WITHIN_ALL_SLA"
)
{% endmacro %}

| spath output=integration_outcome path=payload{}.integration.outcome
{{ calculate_transfer_compatibility() }}
{{ exclude_internal_transfers() }}

| transaction conversationId keeporphans=t
| eval isIntegrated = if(eventType="EHR_INTEGRATIONS", 1, 0)
| eval readyToIntegrate = if(eventType="READY_TO_INTEGRATE_STATUSES", 1, 0)
{{ calculate_sla_status() }}
{{ calculate_outcome() }}
| eventstats count as total_eligible_for_electronic_transfer
| eventstats count(eval(outcome=="SUCCESS")) as count_successfully_integrated
| eventstats count(eval(outcome=="REJECTED")) as count_rejected
| eventstats count(eval(outcome=="AWAITING_INTEGRATION")) as count_awaiting_integration

| eval percentage_successfully_integrated=round((count_successfully_integrated/total_eligible_for_electronic_transfer) * 100,2)
| eval percentage_rejected=round((count_rejected/total_eligible_for_electronic_transfer) * 100,2)
| eval percentage_awaiting_integration=round((count_awaiting_integration/total_eligible_for_electronic_transfer) * 100,2)
| stats 
    first(total_eligible_for_electronic_transfer) as total_eligible_for_electronic_transfer
    first(count_successfully_integrated) as count_successfully_integrated,
    first(percentage_successfully_integrated) as percentage_successfully_integrated,
    first(count_rejected) as count_rejected,
    first(percentage_rejected) as percentage_rejected,
    first(count_awaiting_integration) as count_awaiting_integration,
    first(percentage_awaiting_integration) as percentage_awaiting_integration


    ```first(sendingPracticeSupplierName) as sendingPracticeSupplierName, 
    first(registrationStatus) as registrationStatus,
    first(requestingPracticeSupplierName) as requestingPracticeSupplierName,        
    first(slaStatus) as slaStatus,
    first(twentyFourHoursAgo) as twentyFourHoursAgo, 
    first(transCompatStatEventDateTime) as transCompatStatEventDateTime,
    values(errorHistory) as errorHistory,       
    dc(conversationId) by scenario```